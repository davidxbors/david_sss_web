"use strict";(self.webpackChunkessentials_security=self.webpackChunkessentials_security||[]).push([[451],{5680:(e,t,i)=>{i.d(t,{xA:()=>p,yg:()=>y});var n=i(6540);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(i),m=a,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return i?n.createElement(y,s(s({ref:t},p),{},{components:i})):n.createElement(y,s({ref:t},p))}));function y(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<r;c++)s[c]=i[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},5057:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=i(8168),a=(i(6540),i(5680));const r={},s="Introduction",o={unversionedId:"Web Application Security/Web basics/README",id:"Web Application Security/Web basics/README",title:"Introduction",description:"As the World Wide Web's high-level topology consists mainly of personal computing devices (e.g. desktops, laptops, mobile devices) making HTTP requests to web servers, the general field of web security consists of three main sub-fields: client-side security (i.e. browser security), communications security and server-side security, or web application security.",source:"@site/docs/Web Application Security/Web basics/README.md",sourceDirName:"Web Application Security/Web basics",slug:"/Web Application Security/Web basics/",permalink:"/web-security/Web Application Security/Web basics/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Web basics",permalink:"/web-security/Web Application Security/Web basics/"},next:{title:"web-basics",permalink:"/web-security/Web Application Security/Web basics/web-basics"}},l={},c=[{value:"HTTP Request / Response",id:"http-request--response",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.yg)(u,(0,n.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"As the World Wide Web's high-level topology consists mainly of personal computing devices (e.g. desktops, laptops, mobile devices) making HTTP requests to web servers, the general field of web security consists of three main sub-fields: client-side security (i.e. browser security), communications security and server-side security, or web application security.\nThis lab and the following will focus on the first sub-field, although they might provide some general information on the former two."),(0,a.yg)("p",null,"The design of web applications, and their security in particular is influenced by the following characteristics:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Statelessness:")," by default HTTP is a simple request-response protocol maintaining no state between successive communications.\nThis shortcoming led to the design of cookies, which are small pieces of information exchanged between the client and the web application.\nThe type of information exchanged using cookies needs to be carefully chosen, as a malicious client could possibly attempt to send back a malformed or forged cookie; additionally, cookies most often (but not always) represent confidential data, which means that they should only be transferred over a secure channel (i.e. HTTPS).")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Message format:")," HTTP requests have a specific format, namely they comprise plain-text header and data (although newer improvements also implement a binary protocol).\nThe header contains various information about the client or the server (e.g. a user-agent, page caching information, text encoding information), while the payload is very often (but not always) an HTML page.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Addressing:")," resources on the web are located using the URI/URL addressing scheme.\nPossible vulnerabilities here include a misconfigured web server that allows viewing application-specific files, or worse, that allows accessing other files on the host machine.\nWhile this information leakage is not very dangerous by itself, it may be used as an intermediary stage for other attacks.\nYou can read more about URLs here ",(0,a.yg)("a",{parentName:"p",href:"https://skorks.com/2010/05/what-every-developer-should-know-about-urls/"},"[1]"),".")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Request methods:")," HTTP communication is done by using methods, also called HTTP verbs.\nThe most used methods are GET, POST, PUT and DELETE.\nThe GET method is read-only and is used to retrieve data from the server.\nA DELETE request is used to remove the specified resource from the server.\nThe PUT method is used to modify an entire resource.\nPOST requests are used to create new resources.\nYou can find more information about all methods here ",(0,a.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"},"[2]"),"."))),(0,a.yg)("p",null,"While the client is provided with HTML, JavaScript, CSS pages, modern web applications are implemented using general-purpose scripting or programming languages, e.g. PHP, Java, Python, Ruby, etc. and centralize their data using database systems such as MySQL.\nFaulty back-end code can in itself provide a more dangerous attack surface to potentially malicious clients."),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Client - Server",src:i(5986).A,width:"1049",height:"222"})),(0,a.yg)("h1",{id:"web-applications-today"},"Web Applications Today"),(0,a.yg)("p",null,"Dynamic websites provide tailored user experiences based on information known or given by the user.\nThe user usually has to authenticate to access the website and is authorized to use the services it provides.\nIn this case, the dynamic website contains information about the user, and there is therefore a great deal more for the attacker to steal.\nThe fundamental difference to static web pages is that a dynamic webpage/website contains functionality that can be compromised.\nBreaching the security of the server itself is no longer necessary. It is sufficient to discover the security hole in the dynamic website functionality.\nWe, therefore, need to look at the security of a web application itself. A dynamic website can be considered to be a web application."),(0,a.yg)("p",null,"Web applications introduce a new range of threats, or a new security perimeter, to put it another way.\nDepending on the setup, web applications are commonly located in an internal network or in the demilitarized zone, which therefore renders network level defenses ineffective.\nNetwork, services and operating system level defenses may have been perfectly set in place, but the system would still be vulnerable to a break-in.\nWeb applications commonly interact with internal systems, such as database servers.\nThe network level firewall could be blocking all traffic, but for web applications, it will have to allow HTTP and HTTPS traffic.\nAn attacker might therefore be able to bypass all network-level defenses."),(0,a.yg)("h1",{id:"types-of-vulnerabilities"},"Types of Vulnerabilities"),(0,a.yg)("p",null,"These days, web applications are very complex being composed of multiple libraries, frameworks and using multiple external services.\nEach component can have vulnerabilities.\nTypes of vulnerabilities:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"System vulnerabilities - applications or services that run inside an Operating System or an Operating System vulnerability"),(0,a.yg)("li",{parentName:"ul"},"Runtime vulnerabilities - when one of the components (frameworks such as PHP, Java, Python, WordPress, etc.) of the web application is vulnerable leads to a risk."),(0,a.yg)("li",{parentName:"ul"},"Browser vulnerabilities - occasionally attackers will discover a vulnerability in the browser itself that allows execution of arbitrary binary code when a user simply visits a compromised site.\nBrowsers are complex pieces of machinery with many subsystems (HTML rendering, JavaScript engine, CSS parser, image parsers, etc.), and a small coding mistake in any of these systems could offer malicious code just enough of a foothold to get running."),(0,a.yg)("li",{parentName:"ul"},"Vulnerabilities in web application implementation - here we can talk about OWASP Top Ten vulnerabilities ",(0,a.yg)("a",{parentName:"li",href:"https://owasp.org/www-project-top-ten/"},"[3]"),".")),(0,a.yg)("h1",{id:"http-hypertext-transfer-protocol"},"HTTP (Hypertext Transfer Protocol)"),(0,a.yg)("h2",{id:"http-request--response"},"HTTP Request / Response"))}d.isMDXComponent=!0},5986:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/Session_01_Web_Basics_Diagram_01-4e99cb5c00c34bf8d073c4965c010cce.jpg"}}]);